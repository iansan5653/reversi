{"version":3,"sources":["reversiUtils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["b","w","gameSetup","copyGame","game","map","row","getStatusAt","column","getOtherTeam","team","collectFlippedByMoveInDirection","fromLocation","byTeam","direction","flipped","next","current","x","y","otherTeam","currentLocation","currentStatus","push","undefined","collectFlippedByMove","location","factors","forEach","getGameStatusWithValidMoves","row_statuses","status","length","isMoveValid","Piece","className","style","backgroundColor","Square","onClick","R","Board","children","App","state","gameStatus","currentTeam","attemptMove","wouldBeFlipped","grid","cell","setState","statusesWithValid","this","score","result","cellStatus","Helmet","square","key","React","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f93e1f8.chunk.js","sourcesContent":["export const x = \"empty\";\nexport const b = \"black\";\nexport const w = \"white\";\n\nexport type Team = typeof b | typeof w;\nexport type Status = typeof x | Team;\nexport type GameStatus = Status[][];\n\nexport const valid = \"valid\";\nexport type StatusOrValid = Status | typeof valid;\nexport type GameStatusWithValid = (StatusOrValid)[][];\n\nexport const gameSetup: GameStatus = [\n  [x, x, x, x, x, x, x, x],\n  [x, x, x, x, x, x, x, x],\n  [x, x, x, x, x, x, x, x],\n  [x, x, x, b, w, x, x, x],\n  [x, x, x, w, b, x, x, x],\n  [x, x, x, x, x, x, x, x],\n  [x, x, x, x, x, x, x, x],\n  [x, x, x, x, x, x, x, x],\n];\n\nexport interface Coordinates {\n  row: number;\n  column: number;\n}\n\nexport function copyGame(game: GameStatus): GameStatus {\n  return game.map((row) => [...row]);\n}\n\nexport function getStatusAt(\n  game: GameStatus,\n  { row, column }: Coordinates\n): Status {\n  return game[row]?.[column];\n}\n\nexport function getOtherTeam(team: Team): Team {\n  return team === w ? b : w;\n}\n\nfunction collectFlippedByMoveInDirection(\n  game: GameStatus,\n  fromLocation: Coordinates,\n  byTeam: Team,\n  direction: { x: 1 | 0 | -1; y: 1 | 0 | -1 }\n): Coordinates[] {\n  const flipped: Coordinates[] = [];\n\n  const next = (current: Coordinates): Coordinates => ({\n    row: current.row + direction.x * 1,\n    column: current.column + direction.y * 1,\n  });\n\n  const otherTeam: Team = getOtherTeam(byTeam);\n\n  let currentLocation = next(fromLocation);\n  let currentStatus = getStatusAt(game, currentLocation);\n  while (currentStatus === otherTeam) {\n    flipped.push(currentLocation);\n    currentLocation = next(currentLocation);\n    currentStatus = getStatusAt(game, currentLocation);\n  }\n\n  if (currentStatus === x || currentStatus === undefined) {\n    return [];\n  }\n\n  return flipped;\n}\n\nexport function collectFlippedByMove(\n  game: GameStatus,\n  location: Coordinates,\n  byTeam: Team\n): Coordinates[] {\n  const flipped: Coordinates[] = [];\n  const factors = [1, 0, -1] as const;\n\n  if (getStatusAt(game, location) !== x) return [];\n\n  factors.forEach((x) =>\n    factors.forEach((y) =>\n      flipped.push(\n        ...collectFlippedByMoveInDirection(game, location, byTeam, {\n          x,\n          y,\n        })\n      )\n    )\n  );\n\n  return flipped;\n}\n\nfunction isMoveValid(\n  game: GameStatus,\n  location: Coordinates,\n  byTeam: Team\n): boolean {\n  const factors = [1, 0, -1] as const;\n\n  if (getStatusAt(game, location) !== x) return false;\n\n  for (const x of factors) {\n    for (const y of factors) {\n      if (\n        collectFlippedByMoveInDirection(game, location, byTeam, { x, y }).length\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function getGameStatusWithValidMoves(\n  game: GameStatus,\n  byTeam: Team\n): GameStatusWithValid {\n  return game.map((row_statuses, row) =>\n    row_statuses.map((status, column) =>\n      isMoveValid(game, { row, column }, byTeam) ? valid : status\n    )\n  );\n}\n\nexport function getScore(game: GameStatus): Record<Team, number> {\n  const result = {[b]: 0, [w]: 0};\n  game.forEach(row => row.forEach(cellStatus => {\n    if(cellStatus === b) result[b]++;\n    else if(cellStatus === w) result[w]++;\n  }));\n  return result;\n}\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./App.css\";\nimport * as R from \"./reversiUtils\";\n\nconst Piece = ({ team }: { team: R.Team }) => (\n  <div className=\"Piece\" style={{ backgroundColor: team }} />\n);\n\nconst Square = ({\n  status,\n  location,\n  onClick,\n}: {\n  status: R.StatusOrValid;\n  location: R.Coordinates;\n  onClick: (location: R.Coordinates) => void;\n}) =>\n  status === \"valid\" ? (\n    <button onClick={() => onClick(location)} className={`Square valid`} />\n  ) : (\n    <div className={`Square`}>\n      {(status === R.b || status === R.w) && <Piece team={status} />}\n    </div>\n  );\n\nconst Board = ({ children }: { children: React.ReactNode }) => (\n  <div className=\"Board\">{children}</div>\n);\n\ninterface AppState {\n  gameStatus: R.GameStatus;\n  currentTeam: R.Team;\n}\n\nclass App extends React.Component<{}, AppState> {\n  state: AppState = {\n    gameStatus: R.copyGame(R.gameSetup),\n    currentTeam: R.b,\n  };\n\n  private attemptMove = (location: R.Coordinates) => {\n    const cellStatus = R.getStatusAt(this.state.gameStatus, location);\n    if (cellStatus === R.x) {\n      const wouldBeFlipped = R.collectFlippedByMove(\n        this.state.gameStatus,\n        location,\n        this.state.currentTeam\n      );\n\n      if (wouldBeFlipped.length > 0) {\n        const grid = R.copyGame(this.state.gameStatus);\n\n        [location, ...wouldBeFlipped].forEach(\n          (cell) => (grid[cell.row][cell.column] = this.state.currentTeam)\n        );\n\n        this.setState({\n          gameStatus: grid,\n          currentTeam: R.getOtherTeam(this.state.currentTeam),\n        });\n      }\n    }\n  };\n\n  public render(): React.ReactNode {\n    const statusesWithValid = R.getGameStatusWithValidMoves(\n      this.state.gameStatus,\n      this.state.currentTeam\n    );\n    const score = R.getScore(this.state.gameStatus);\n    return (\n      <div className=\"App\" style={{ backgroundColor: this.state.currentTeam }}>\n        <Helmet>\n          <title>{`Reversi (B: ${score[R.b]}, W: ${score[R.w]})`}</title>\n        </Helmet>\n        <Board>\n          {statusesWithValid.map((row_statuses, row) =>\n            row_statuses.map((square, column) => (\n              <Square\n                key={`${row}_${column}`}\n                location={{ row, column }}\n                onClick={this.attemptMove}\n                status={square}\n              />\n            ))\n          )}\n        </Board>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}